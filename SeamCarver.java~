import java.awt.Color;

public class SeamCarver {
    private Picture ourPicture;
    private Color[][] colorMatrix;
    private double[][] energyMatrix;
    private int W;
    private int H;
    
    public SeamCarver(Picture picture) {
        // create a seam carver object based on the given picture
        ourPicture = picture;
        W = picture.width();
        H = picture.height();
        colorMatrix = new Color[H][W];
        energyMatrix = new double[W][H];
        for (int j = 0; j < H; j++) {
            for (int i = 0; i < W; i++) {
                colorMatrix[j][i] = picture.get(i, j);
            }
        }
        for (int i = 0; i < W; i++) {
            for (int j = 0; j < H; j++) {
                energyMatrix[i][j] = energy(i, j);
            }
        }
    }

        
    
    public Picture picture() {
        // current picture
        return this.ourPicture;
    }
    
    public int width() {
        // width of current picture
        return ourPicture.width();
    }
    
    public int height() {
        // height of current picture
        return ourPicture.height();
    }
    
    public double energy(int x, int y) {
        int i = y;
        int j = x;
        // energy of pixel at column x and row y
        if (x == 0 || x == W-1 || y == 0 || y == H-1)
            return 195075;
        else
            return xGradient(i, j) + yGradient(i, j);
    }
    
    private double xGradient(int x, int y) {
        Color colorL = colorMatrix[x-1][y];
        Color colorR = colorMatrix[x+1][y];
        int red = Math.abs(colorL.getRed() - colorR.getRed());
        int green = Math.abs(colorL.getGreen() - colorR.getGreen());
        int blue = Math.abs(colorL.getBlue() - colorR.getBlue());
        return red * red + green * green + blue * blue;
    }
    
    private double yGradient(int x, int y) {
        Color colorH = colorMatrix[x][y-1];
        Color colorL = colorMatrix[x][y+1];
        int red = Math.abs(colorL.getRed() - colorH.getRed());
        int green = Math.abs(colorL.getGreen() - colorH.getGreen());
        int blue = Math.abs(colorL.getBlue() - colorH.getBlue());
        return red * red + green * green + blue * blue;
    }
    
    //public int[] findHorizontalSeam() {
        // sequence of indices for horizontal seam
    //}
    
    public int[] findVerticalSeam() {
        // sequence of indices for vertical seam
        double[][] distTo = new double[W][H];
        int[] seam = new int[H];
        for (int i = 0; i < W; i++) {
            distTo[i][0] = 0;
        }
        for (int j = 1; j < H; j++) {
            for (int i = 0; i < W; i++) {
                disTo[i][j] = Double.POSITIVE_INFINITY;
            }
        }
        
        for (int j = 0; j < H; j++) {
            for (int i = 0; i < W; i++) {
                
        
    }
    
    public void removeHorizontalSeam(int[] seam) {
        // remove horizontal seam from current picture
        
    }
    public void removeVerticalSeam(int[] seam) {
        // remove vertical seam from current picture
    }
}